k <- k + 1
y <- runif(1)
u <- runif(1)
if (u <= y*(1-y)) {
i <- i + 1
x[i] <- y
}
}
print(k)
n <- 1000
i <- 0
k <- 0
x <- numeric(n)
while (i < n) {
k <- k + 1
y <- runif(1)
u <- runif(1)
if (u <= y*(1-y)) {
i <- i + 1
x[i] <- y
}
}
print(k)
n <- 1000
i <- 0
k <- 0
x <- numeric(n)
while (i < n) {
k <- k + 1
y <- runif(1)
u <- runif(1)
if (u <= y*(1-y)) {
i <- i + 1
x[i] <- y
}
}
print(k)
n <- 1000
i <- 0
k <- 0
x <- numeric(n)
while (i < n) {
k <- k + 1
y <- runif(1)
u <- runif(1)
if (u <= y*(1-y)) {
i <- i + 1
x[i] <- y
}
}
print(k)
n <- 1000
i <- 0
k <- 0
x <- numeric(n)
while (i < n) {
k <- k + 1
y <- runif(1)
u <- runif(1)
if (u <= y*(1-y)) {
i <- i + 1
x[i] <- y
}
}
print(k)
n <- 1000
i <- 0
k <- 0
x <- numeric(n)
while (i < n) {
k <- k + 1
y <- runif(1)
u <- runif(1)
if (u <= y*(1-y)) {
i <- i + 1
x[i] <- y
}
}
print(k)
n <- 1000
i <- 0
k <- 0
x <- numeric(n)
while (i < n) {
k <- k + 1
y <- runif(1)
u <- runif(1)
if (u <= y*(1-y)) {
i <- i + 1
x[i] <- y
}
}
print(k)
n <- 1000
i <- 0
k <- 0
x <- numeric(n)
while (i < n) {
k <- k + 1
y <- runif(1)
u <- runif(1)
if (u <= y*(1-y)) {
i <- i + 1
x[i] <- y
}
}
print(k)
print("Number of iterations: ", k)
print("Number of iterations: " + k)
print("Number of iterations: {k}")
cat("Number of iterations: ", k)
# example 2
p <- seq(0.1, 0.9, 0.1)
0.1, 0.9, 0.1)
for (i in p) {
print(i)
}
q[0] <- qbeta(0,1, 2, 2)
# example 2
p <- seq(0.1, 0.9, 0.1)
quantile_t <- qbeta(p, 2, 2)
quantile_p <- quantile(p, x)
p <- seq(0.1, 0.9, 0.1)
quantile_t <- qbeta(p, 2, 2) # theoretical quantiles
quantile_p <- quantile(p, x) # pratical quantiles
cat("Theoretical quantiles: ", quantile_t)
cat("Pratical quantiles: ", quantile_)
p <- seq(0.1, 0.9, 0.1)
quantile_t <- qbeta(p, 2, 2) # theoretical quantiles
quantile_p <- quantile(p, x) # pratical quantiles
cat("Theoretical quantiles: ", quantile_t)
cat("Pratical quantiles: ", quantile_p)
quantile_p <- quantile(x, p) # pratical quantiles
cat("Pratical quantiles: ", quantile_p)
p <- seq(0.1, 0.9, 0.1)
quantile_t <- qbeta(p, 2, 2) # theoretical quantiles
quantile_p <- quantile(x, p) # pratical quantiles
cat("Theoretical quantiles: ", quantile_t)
cat("Pratical quantiles: ", quantile_p)
print("a", k)
message("a", k)
message("a ", k)
cat("Theoretical quantiles: ", quantile_t)
cat("Pratical quantiles: ", quantile_p)
n <- 10000
i <- 0
k <- 0
x <- numeric(n)
while (i < n) {
k <- k + 1
y <- runif(1)
u <- runif(1)
if (u <= y*(1-y)) {
i <- i + 1
x[i] <- y
}
}
cat("Number of iterations: ", k)
# 2.1
p <- seq(0.1, 0.9, 0.1)
quantile_t <- qbeta(p, 2, 2) # theoretical quantiles
quantile_p <- quantile(x, p) # pratical quantiles
cat("Theoretical quantiles: ", quantile_t)
cat("Pratical quantiles: ", quantile_p)
# example 2
n <- 1000
h <- runif(1000)
g <- e^(-h)/(1+h^2)
g <- exp(-h)/(1+h^2)
mean(g)
# p1
h <- dexp(n, 1)
# p1
h <- dexp(n, 1)
g <- 1/(1+h^2)
mean(g)
# p1
h <- dexp(n, 1)
# p1
h <- rexp(n, 1)
g <- 1/(1+h^2)
mean(g)
# p1
h <- rexp(n, 1)
g <- 1/(1+h^2)
mean(g)
print(exp(0))
print(exp(-1))
print(exp(1))
# example 2
m <- 1000
# p0
h <- runif(m)
g <- exp(-h)/(1+h^2)
mean(g)
# p1
g <- function(x) {
exp(-x * log(1+x^2)) * (x > 0) * (x < 1)
}
x <- runif(m)
fg <- g(x)
mean(fg)
# example 2
m <- 1000
x <- runif(m)
# p0
g <- exp(-x)/(1+x^2)
mean(g)
# p1
g <- function(x) {
exp(-x * log(1+x^2)) * (x > 0) * (x < 1)
}
h <- rexp(n, 1)
fg <- g/(exp(-x))
mean(fg)
h <- rexp(n, 1)
fg <- g/(exp(-x))
h <- rexp(n, 1)
fg <- g(x)/(exp(-x))
mean(fg)
x <- rexp(n, 1)
fg <- g(x)/(exp(-x))
mean(fg)
m <- 1000
x <- runif(m)
# p0
g <- exp(-x)/(1+x^2)
mean(g)
# p1
g <- function(x) {
exp(-x * log(1+x^2)) * (x > 0) * (x < 1)
}
x <- rexp(n, 1)
fg <- g(x)/(exp(-x))
mean(fg)
# p2
source('~/Renan/Lisboa - IST/Estatistica Computacional/Projeto/datasetAnalysis.R', echo=TRUE)
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB")
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB",density = TRUE)
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB",density = TRUE)
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB", freq = false)
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB", freq = false)
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB", freq = FALSE)
ggplot(data = dat) +
geom_histogram(data = as.data.frame(x), aes(x=x, y=..density..)) +
geom_line(aes(x=dat$x, y=dgamma(dat$x,fit.params$estimate["shape"], fit.params$estimate["rate"])), color="red", size = 1) +
theme_classic()
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB", freq = FALSE)
m = 10000
theta = rbeta(m, 5, 3)
mean(theta/(1-theta))
0.625/(1-0.625)
mean(theta)
odds = theta/(1-theta)
mean(odds)
odds = theta/(1-theta)
mean(odds)
ind = odds > 1
mean(ind)
normal = rnorm(m, 0, 1)
quantile(normal, 0.9)
qnorm(0.9, 0, 1)
sqrt(5.2/100)
sqrt(5.2/5000)
#hist(theta, freq=FALSE)
#curve(dgamma(x=x, shape=a, rate=b), col="blue", add=TRUE)
fit.params
#hist(theta, freq=FALSE)
#curve(dgamma(x=x, shape=a, rate=b), col="blue", add=TRUE)
curve(dgamma(x=x, shape=8.8312777, rate=1.5799002), col="blue", add=TRUE)
ggplot(data = dat) +
geom_histogram(data = as.data.frame(x), aes(x=x, y=..density..)) +
geom_line(aes(x=dat$x, y=dgamma(dat$x,fit.params$estimate["shape"], fit.params$estimate["rate"])), color="red", size = 1) +
theme_classic()
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB", freq = FALSE)
#hist(theta, freq=FALSE)
#curve(dgamma(x=x, shape=a, rate=b), col="blue", add=TRUE)
curve(dgamma(x=x, shape=8.8312777, rate=1.5799002), col="blue", add=TRUE)
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB", freq = FALSE, breaks = 0.1)
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB", freq = FALSE, breaks = 10)
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB", freq = FALSE, breaks = 20)
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB", freq = FALSE, breaks = 30)
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB", freq = FALSE, breaks = 40)
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB", freq = FALSE, breaks = 100)
#hist(theta, freq=FALSE)
#curve(dgamma(x=x, shape=a, rate=b), col="blue", add=TRUE)
curve(dgamma(x=x, shape=8.8312777, rate=1.5799002), col="blue", add=TRUE)
# read dataset
setwd("/home/renan/Renan/Lisboa - IST/Estatistica Computacional/Projeto")
data = read.table('Trabalho5_EC.txt', sep = '\t', dec = '.', header = TRUE)
data$DIABETES <- cut(data$GHB, breaks = c(0,7,50), labels = c("Negative", "Positive"))
# bmi calculation (with lbs and inches)
data$BMI = 703 * data$WHT / (data$HHT*data$HHT)
data$BMI_CAT <- cut(data$BMI, breaks = c(0, 18.5, 25, 30, 100), labels=c("Underweight", "Normal weight", "Overweight", "Obesity"))
# ages' bin
data$AGE_CAT <- cut(data$AGE, breaks = c(17,25,35,45,55,65,200), labels=c("18-25","26-35","36-45","46-55","56-65",">=66"))
summary(data)
# chi square tests
# diabetes x bmi_cat
test_bmi_cat = table(data$DIABETES, data$BMI_CAT)
test_bmi_cat
chisq.test(test_bmi_cat)
fisher.test(test_bmi_cat)
# diabetes x age
test_age_cat = table(data$DIABETES, data$AGE_CAT)
test_age_cat
chisq.test(test_age_cat)
# diabetes x location
test_location = table(data$DIABETES, data$LOCATION)
test_location
chisq.test(test_location)
# diabetes x gender
test_gender = table(data$DIABETES, data$GENDER)
test_gender
chisq.test(test_gender)
# diabetes x frame
test_frame = table(data$DIABETES, data$FRAME)
test_frame
chisq.test(test_frame)
# some scatter plots
plot(data$CHOL, data$GHB, main="Glycosolated Hemoglobin x Total Cholesterol", xlab = "CHOL", ylab = "GHB")
plot(data$SGLU, data$GHB, main="Glycosolated Hemoglobin x  Stabilized Glucose", xlab = "SGLU", ylab = "GHB")
plot(data$HDL, data$GHB, main="Glycosolated Hemoglobin x High Density Lipoprotein", xlab = "HDL", ylab = "GHB")
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB", freq = FALSE, breaks = 100)
library(ggplot2)
fit.params <- fitdistr(x, "gamma", lower = c(0, 0))
curve(dgamma(x=x, shape=8.8312777, rate=1.5799002), col="blue", add=TRUE)
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB", freq = FALSE, breaks = 100)
setwd("/home/renan/Renan/Lisboa - IST/Estatistica Computacional/Projeto")
data = read.table('Trabalho5_EC.txt', sep = '\t', dec = '.', header = TRUE)
data$DIABETES <- cut(data$GHB, breaks = c(0,7,50), labels = c("Negative", "Positive"))
# bmi calculation (with lbs and inches)
data$BMI = 703 * data$WHT / (data$HHT*data$HHT)
data$BMI_CAT <- cut(data$BMI, breaks = c(0, 18.5, 25, 30, 100), labels=c("Underweight", "Normal weight", "Overweight", "Obesity"))
# ages' bin
data$AGE_CAT <- cut(data$AGE, breaks = c(17,25,35,45,55,65,200), labels=c("18-25","26-35","36-45","46-55","56-65",">=66"))
summary(data)
# chi square tests
# diabetes x bmi_cat
test_bmi_cat = table(data$DIABETES, data$BMI_CAT)
test_bmi_cat
chisq.test(test_bmi_cat)
fisher.test(test_bmi_cat)
# diabetes x age
test_age_cat = table(data$DIABETES, data$AGE_CAT)
test_age_cat
chisq.test(test_age_cat)
# diabetes x location
test_location = table(data$DIABETES, data$LOCATION)
test_location
chisq.test(test_location)
# diabetes x gender
test_gender = table(data$DIABETES, data$GENDER)
test_gender
chisq.test(test_gender)
# diabetes x frame
test_frame = table(data$DIABETES, data$FRAME)
test_frame
chisq.test(test_frame)
# some scatter plots
plot(data$CHOL, data$GHB, main="Glycosolated Hemoglobin x Total Cholesterol", xlab = "CHOL", ylab = "GHB")
plot(data$SGLU, data$GHB, main="Glycosolated Hemoglobin x  Stabilized Glucose", xlab = "SGLU", ylab = "GHB")
plot(data$HDL, data$GHB, main="Glycosolated Hemoglobin x High Density Lipoprotein", xlab = "HDL", ylab = "GHB")
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB", freq = FALSE, breaks = 100)
fit.params <- fitdistr(x, "gamma", lower = c(0, 0))
library(ggplot2)
fit.params <- fitdistr(x, "gamma", lower = c(0, 0))
curve(dgamma(x=x, shape=8.8312777, rate=1.5799002), col="blue", add=TRUE)
fit.params
fit.params <- fitdistr(data$GHB, "gamma", lower = c(0, 0))
library(MASS)
fit.params <- fitdistr(data$GHB, "gamma", lower = c(0, 0))
fit.params
curve(dgamma(x=x, shape=8.8312777, rate=1.5799002), col="blue", add=TRUE)
setwd("/home/renan/Renan/Lisboa - IST/Estatistica Computacional/Projeto")
data = read.table('Trabalho5_EC.txt', sep = '\t', dec = '.', header = TRUE)
data$DIABETES <- cut(data$GHB, breaks = c(0,7,50), labels = c("Negative", "Positive"))
# bmi calculation (with lbs and inches)
data$BMI = 703 * data$WHT / (data$HHT*data$HHT)
data$BMI_CAT <- cut(data$BMI, breaks = c(0, 18.5, 25, 30, 100), labels=c("Underweight", "Normal weight", "Overweight", "Obesity"))
# ages' bin
data$AGE_CAT <- cut(data$AGE, breaks = c(17,25,35,45,55,65,200), labels=c("18-25","26-35","36-45","46-55","56-65",">=66"))
summary(data)
# chi square tests
# diabetes x bmi_cat
test_bmi_cat = table(data$DIABETES, data$BMI_CAT)
test_bmi_cat
chisq.test(test_bmi_cat)
fisher.test(test_bmi_cat)
# diabetes x age
test_age_cat = table(data$DIABETES, data$AGE_CAT)
test_age_cat
chisq.test(test_age_cat)
# diabetes x location
test_location = table(data$DIABETES, data$LOCATION)
test_location
chisq.test(test_location)
# diabetes x gender
test_gender = table(data$DIABETES, data$GENDER)
test_gender
chisq.test(test_gender)
# diabetes x frame
test_frame = table(data$DIABETES, data$FRAME)
test_frame
chisq.test(test_frame)
# some scatter plots
plot(data$CHOL, data$GHB, main="Glycosolated Hemoglobin x Total Cholesterol", xlab = "CHOL", ylab = "GHB")
plot(data$SGLU, data$GHB, main="Glycosolated Hemoglobin x  Stabilized Glucose", xlab = "SGLU", ylab = "GHB")
plot(data$HDL, data$GHB, main="Glycosolated Hemoglobin x High Density Lipoprotein", xlab = "HDL", ylab = "GHB")
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB", freq = FALSE, breaks = 100)
fit.params <- fitdistr(data$GHB, "gamma", lower = c(0, 0))
fit.params
# read dataset
setwd("/home/renan/Renan/Lisboa - IST/Estatistica Computacional/Projeto")
data = read.table('Trabalho5_EC.txt', sep = '\t', dec = '.', header = TRUE)
data$DIABETES <- cut(data$GHB, breaks = c(0,7,50), labels = c("Negative", "Positive"))
# bmi calculation (with lbs and inches)
data$BMI = 703 * data$WHT / (data$HHT*data$HHT)
data$BMI_CAT <- cut(data$BMI, breaks = c(0, 18.5, 25, 30, 100), labels=c("Underweight", "Normal weight", "Overweight", "Obesity"))
# ages' bin
data$AGE_CAT <- cut(data$AGE, breaks = c(17,25,35,45,55,65,200), labels=c("18-25","26-35","36-45","46-55","56-65",">=66"))
summary(data)
# chi square tests
# diabetes x bmi_cat
test_bmi_cat = table(data$DIABETES, data$BMI_CAT)
test_bmi_cat
chisq.test(test_bmi_cat)
fisher.test(test_bmi_cat)
# diabetes x age
test_age_cat = table(data$DIABETES, data$AGE_CAT)
test_age_cat
chisq.test(test_age_cat)
# diabetes x location
test_location = table(data$DIABETES, data$LOCATION)
test_location
chisq.test(test_location)
# diabetes x gender
test_gender = table(data$DIABETES, data$GENDER)
test_gender
chisq.test(test_gender)
# diabetes x frame
test_frame = table(data$DIABETES, data$FRAME)
test_frame
chisq.test(test_frame)
# some scatter plots
plot(data$CHOL, data$GHB, main="Glycosolated Hemoglobin x Total Cholesterol", xlab = "CHOL", ylab = "GHB")
plot(data$SGLU, data$GHB, main="Glycosolated Hemoglobin x  Stabilized Glucose", xlab = "SGLU", ylab = "GHB")
plot(data$HDL, data$GHB, main="Glycosolated Hemoglobin x High Density Lipoprotein", xlab = "HDL", ylab = "GHB")
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB", freq = FALSE, breaks = 100)
fit.params <- fitdistr(data$GHB, "gamma", lower = c(0, 0))
library(MASS)
fit.params <- fitdistr(data$GHB, "gamma", lower = c(0, 0))
fit.params
curve(dgamma(x=x, shape=8.8312777, rate=1.5799002), col="blue", add=TRUE)
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB", freq = FALSE, breaks = 50)
library(MASS)
fit.params <- fitdistr(data$GHB, "gamma", lower = c(0, 0))
fit.params
curve(dgamma(x=x, shape=8.8312777, rate=1.5799002), col="blue", add=TRUE)
matrix = matrix(c(0, 1, 0.3, 0.7))
matrix
matrix = matrix(c(0, 1,
0.3, 0.7))
matrix
matrix = matrix(c(0, 1),
c(0.3, 0.7))
matrix = rbind(c(0, 1),
c(0.3, 0.7))
matrix
p4 = matrix %*% matrix %*% matrix %*% matrix
p4
pi %*% p4
t(pi) %*% p4
t(pi)
pi
pi = c(0.231, 0.769)
pi
t(pi)
t(pi)
t(pi) %*% p4
t(pi) %*% p4
pi
pi %*% p4
)
t(pi) %*% p4
p4
p3 = matrix %*% matrix %*% matrix
p3
4
p4 = matrix %*% matrix %*% matrix %*% matrix
p4
0.231*0.7630 + 0.769*0.763
