}
list(samples, cont_rej)
}
sigma_2 = sample_rayleigh(n, sigma)
sigma_2
sigma_2[1]
sigma_2[2]
sigma_2 = sample_rayleigh(n, 2)
sigma_4 = sample_rayleigh(n, 4)
sigma_4[2]
sigma_2 = sample_rayleigh(n, 2)
sigma_2[2]
f <- function(x, sigma) {
(x/(sigma^2))*exp((-x^2)/(2*sigma^2))
}
n <- 10000
sample_rayleigh <- function(n, sigma){
samples <- numeric(n)
u0 <- rchisq(1, 1)
samples[1] <- u0
cont_rej <- 0
for (t in 2:n) {
v <- rchisq(1, samples[t-1])
r <- f(v, sigma) * dchisq(samples[t-1], v)/(f(samples[t-1], sigma) * dchisq(v, samples[t-1]))
z <- runif(1)
if (z <= r) {
samples[t] <- v
} else {
samples[t] <- samples[t-1]
cont_rej <- cont_rej + 1
}
}
list(samples, cont_rej)
}
sigma_4 = sample_rayleigh(n, 4)
sigma_4[2]
sigma_2 = sample_rayleigh(n, 2)
sigma_2[2]
integrate(f, 0, 0.5)
# 4.1.1
n = 5000
u <- runif(n, 0, pi/2)
g <- (pi/2) * cos(u)
mean(g)
integrate(cos, 0, pi/2)
# 4.1.2
n = 5000
u <- runif(n, 0, 0.5)
g <- exp(-u)*0.5
mean_g = mean(g)
mean_g
vn = 0
for (i in 1:n) {
vn = vn + (g[i] - mean_g)^2
}
vn = vn/(n-1)
vn
x <- rexp(n, 1)
ind <- (x>0 & x<0.5)
mean_g_2 <- mean(ind)
mean_g_2
vn_2 <- 0
for (i in 1:n) {
vn_2 <- vn_2 + (x[i] - mean_g_2)^2
}
vn_2 <- vn_2/(n-1)
vn_2
f <- function(x){
exp(-x)
}
integrate(f, 0, 0.5)
mean(x)
data(patch, package="bootstrap")
install.packages("bootstrap")
data(patch, package="bootstrap")
patch
n <- nrow(data)
n <- nrow(patch)
n
y <- patch$y
T <- mean(y)/mean(z)
y <- patch$y
z <- patch$z
T <- mean(y)/mean(z)
T
T.jack <- numeric(n)
print(T)
T.jack <- numeric(n)
for (i in 1:n) {
T.jack[i] <- mean(y[-i]/mean(z[-i]))
bias <- (n-1)(mean(T.jack) - T)
}
T.jack <- numeric(n)
for (i in 1:n) {
T.jack[i] <- mean(y[-i]/mean(z[-i]))
bias <- (n-1)*(mean(T.jack) - T)
}
bias <- (n-1)*(mean(T.jack) - T)
T.jack <- numeric(n)
for (i in 1:n) {
T.jack[i] <- mean(y[-i]/mean(z[-i]))
}
bias <- (n-1)*(mean(T.jack) - T)
bias
for (i in 1:n)
T.jack[i] <- mean(y[-i]/mean(z[-i]))
bias <- (n-1)*(mean(T.jack) - T)
bias
for (i in 1:n)
T.jack[i] <- mean(y[-i]/mean(z[-i]))
bias <- (n-1)*(mean(T.jack) - T)
bias
T.jack <- numeric(n)
for (i in 1:n)
T.jack[i] <- mean(y[-i]/mean(z[-i]))
bias <- (n-1)*(mean(T.jack) - T)
print(bias)
se <- sqrt((n-1)*mean((T.jack - mean(T.jack))^2)
se
se <- sqrt((n-1)*mean((T.jack - mean(T.jack))^2)
se
se <- sqrt((n-1)*mean((T.jack - mean(T.jack))^2)
se <- sqrt((n-1)*mean((T.jack - mean(T.jack))^2))
se
se <- sqrt((n-1)*mean((T.jack - mean(T.jack))^2))
se
#ex 4
n <- 10
x <- sample(1:100, size = n)
x
M <- numeric(n)
M <- numeric(n)
for (i in 1:n)
M[i] <- median(y[-i])
M
for (i in 1:n)
M[i] <- median(x[-i])
M
#ex 4
n <- 10
x <- sample(1:100, size = n)
x
M <- numeric(n)
for (i in 1:n)
M[i] <- median(x[-i])
M
Mbar <- mean(M)
Mbar <- mean(M)
print(sqrt(((n-1)/n * sum(M-Mbar)^2)))
#ex 4
n <- 10
x <- sample(1:100, size = n)
x
M <- numeric(n)
for (i in 1:n)
M[i] <- median(x[-i])
M
Mbar <- mean(M)
print(sqrt((n-1)/n * sum((M - Mbar)^2)))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
9.5/2
4.75-5*0.7
(4.75-5*0.7)/-.3
(4.75-5*0.7)/0.3
(4.75-5.5*0.7)/0.3
# ex
5.5*0.7+3*0.3
(4.75-6*0.7)/0.3
(4.75-6.5*0.7)/0.3
9*0,7
9*0.7
4.5*0.7
data(patch, package = "bootstrap") #alternative way
n <- nrow(patch)
A <- 2000
T.b <- numeric(A)
T <- mean(patch$y) / mean(patch$z)
print (T)
y <- patch$y[1]
y <- patch$y[1]
# ex 2
data(patch, package = "bootstrap") #alternative way
n <- nrow(patch)
A <- 2000
T.b <- numeric(A)
T <- mean(patch$y) / mean(patch$z)
print (T)
for (a in 1:A) {
i <- sample(1:n, size = n, replace = TRUE)
y <- patch$y[i]
z <- patch$z[i]
T.b[a] <- mean(y) / mean(z)
}
bias <- mean(T.b) - T
se <- sd(T.b)
print(list(est=T, bias = bias, se = se, cvb = bias/se))
T.b
T.b[A]
y <- patch$y[i]
z <- patch$z[i]
T.b[a] <- mean(y) / mean(z)
T.b[A]
y <- patch$y[i]
z <- patch$z[i]
T.b[a] <- (y) / (z)
y <- patch$y[i]
z <- patch$z[i]
T.b[a] <- y/z
y
z
y <- patch$y[i]
y
y <- patch$y[1]
y
i <- sample(1:n, size = n, replace = TRUE)
i
y <- patch$y[i]
yz <- patch$z[i]
y
# ex 2
data(patch, package = "bootstrap") #alternative way
n <- nrow(patch)
A <- 2000
T.b <- numeric(A)
T <- mean(patch$y) / mean(patch$z)
print (T)
for (a in 1:A) {
i <- sample(1:n, size = n, replace = TRUE)
y <- patch$y[i]
z <- patch$z[i]
T.b[a] <- mean(y) / mean(z)
}
bias <- mean(T.b) - T
se <- sd(T.b)
print(list(est=T, bias = bias, se = se, cvb = bias/se))
# read dataset
setwd("/home/renan/Renan/Lisboa - IST/Estatistica Computacional/Projeto") # change for your working directory
data = read.table('Trabalho5_EC.txt', sep = '\t', dec = '.', header = TRUE)
# checking some statistics of the data
summary(data)
# there is a small amount of numeric data missing. its going to inputed the mean for this values
for(i in 1:ncol(data)) {
if (is.numeric(data[, i])) {
data[, i][is.na(data[, i])] <- mean(data[, i], na.rm = TRUE)
}
}
summary(data)
# checking correlation between variables
# first, we want the numerical variables
nums <- unlist(lapply(data, is.numeric))
nums[1] <- FALSE # we don't need to use id for the analysis
cor_data = cor(data[, nums])
cor_matrix = as.matrix(cor_data)
# install.packages("corrplot")
library(corrplot)
corrplot(cor_matrix, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
# the most correlated variables are: SGLU and GHB; H and WHT; H and W (0.83455575 - biggest one); SBP and DSP
# boxplots
boxplot(data[nums], use.cols=TRUE)
# bmi calculation (with lbs and inches)
data$BMI = 703 * data$WHT / (data$HHT*data$HHT)
# adding BMI classification
data$BMI_CAT <- cut(data$BMI, breaks = c(0, 18.5, 25, 30, 100), labels=c("Underweight", "Normal weight", "Overweight", "Obesity"))
# glycosolated hemoglobin (outcome) > 7.0 is usually taken as a positive diagnosis of diabetes
data$DIABETES <- cut(data$GHB, breaks = c(0,7,50), labels = c("Negative", "Positive"))
# ages' bin
data$AGE_CAT <- cut(data$AGE, breaks = c(17,25,35,45,55,65,200), labels=c("18-25","26-35","36-45","46-55","56-65",">=66"))
# summary with the created columns added
summary(data)
# chi square tests
# diabetes x bmi_cat
test_bmi_cat = table(data$DIABETES, data$BMI_CAT)
test_bmi_cat
chisq.test(test_bmi_cat) # may indicate that higher BMI is related to diabetes
# fisher.test(test_bmi_cat)
# diabetes x age
test_age_cat = table(data$DIABETES, data$AGE_CAT)
test_age_cat
chisq.test(test_age_cat)
# diabetes x location
test_location = table(data$DIABETES, data$LOCATION)
test_location
chisq.test(test_location)
# diabetes x gender
test_gender = table(data$DIABETES, data$GENDER)
test_gender
chisq.test(test_gender)
# diabetes x frame
test_frame = table(data$DIABETES, data$FRAME)
test_frame
chisq.test(test_frame)
# some scatter plots with colors to differentiate HDL > 7 from HDL < 7
nums_ext <- unlist(lapply(data, is.numeric))
nums_ext[1] <- FALSE # we don't need to use id for the analysis
diabetes_color <- c("#E7B800", "#FC4E07")
pairs(data[, nums_ext], col = diabetes_color[data$DIABETES], lower.panel=NULL) # we can see that high values of SGLU may indicate higher HDL. It makes sense, because Glycosylated hemoglobin is the Hemoglobin to which glucose is bound
# zoomed chart of SGLU x GHB
plot(data$SGLU, data$GHB, main="Glycosolated Hemoglobin x  Stabilized Glucose", xlab = "SGLU", ylab = "GHB")
# zoomed chart of CHOL x GHB
plot(data$CHOL, data$GHB, main="Glycosolated Hemoglobin x  Total Cholesterol", xlab = "CHOL", ylab = "GHB")
# zoomed chart of HDL x GHB
plot(data$HDL, data$GHB, main="Glycosolated Hemoglobin x  High Density Lipoprotein", xlab = "HDL", ylab = "GHB")
# histogram
hist(data$GHB, xlab = "GHB", main = "Histogram of GHB", freq = FALSE, breaks = 50)
library(MASS)
fit.params <- fitdistr(data$GHB, "gamma", lower = c(0, 0))
curve(dgamma(x=x, shape=fit.params$estimate['shape'], rate=fit.params$estimate['rate']), col="blue", add=TRUE)
fit.params <- fitdistr(data$GHB, "weibull", lower = c(0, 0))
curve(dweibull(x=x, shape=fit.params$estimate['shape'], scale=fit.params$estimate['scale']), col="green", add=TRUE)
# Generalized linear model (without using prior)
glm_ghb <- glm(GHB ~ CHOL + SGLU + HDL + AGE + SBP + DSP + BMI + W + H, data=data, family=Gamma(link="inverse"))
summary(glm_ghb)
# removing variables with p-value > 0.05
glm_ghb_2 <- glm(GHB ~ CHOL + SGLU + HDL + AGE, data=data, family=Gamma(link="inverse"))
summary(glm_ghb_2)
confint(glm_ghb_2)
# anova test removing a variable that is important to check the result
glm_ghb_3 <- glm(GHB ~ SGLU + HDL + AGE + SBP + DSP + BMI + W + H, data=data, family=Gamma(link="inverse"))
anova(glm_ghb, glm_ghb_3, test = "Chisq")
# glm with prior
library("rjags")
set.seed(5)
# note: dgamma in JAGS = dgamma(shape, rate)
mod1_string = " model {
for (i in 1:length(y)) {
y[i] ~ dgamma(rate/inv_mu[i], rate)
inv_mu[i] = -(b[1] + b[2]*CHOL[i] + b[3]*SGLU[i] + b[4]*HDL[i] + b[5]*AGE[i] + b[6]*SBP[i] + b[7]*DSP[i] + b[8]*BMI[i])
}
for (j in 1:8) {
b[j] ~ dnorm(0.0, 1.0/1.0e6)
}
rate ~ dgamma(0.001, 0.001)
} "
data_jags = list(y=data$GHB, CHOL=data[,"CHOL"], SGLU=data[,"SGLU"], HDL=data[,"HDL"], AGE=data[,"AGE"], SBP=data[,"SBP"], DSP=data[,"DSP"], BMI=data[,"BMI"])
params = c("rate", "inv_mu", "b")
inits1 = function() {
inits = list("b"=rnorm(8,0.0,100.0), "rate"=rgamma(1,1.0,1.0))
}
# boxplots
boxplot(data[nums], use.cols=TRUE)
# glm with prior
library("rjags")
set.seed(5)
# note: dgamma in JAGS = dgamma(shape, rate)
mod1_string = " model {
for (i in 1:length(y)) {
y[i] ~ dgamma(rate/inv_mu[i], rate)
inv_mu[i] = -(b[1] + b[2]*CHOL[i] + b[3]*SGLU[i] + b[4]*HDL[i] + b[5]*AGE[i] + b[6]*SBP[i] + b[7]*DSP[i] + b[8]*BMI[i])
}
for (j in 1:8) {
b[j] ~ dnorm(0.0, 1.0/1.0e6)
}
rate ~ dgamma(0.001, 0.001)
} "
data_jags = list(y=data$GHB, CHOL=data[,"CHOL"], SGLU=data[,"SGLU"], HDL=data[,"HDL"], AGE=data[,"AGE"], SBP=data[,"SBP"], DSP=data[,"DSP"], BMI=data[,"BMI"])
params = c("rate", "inv_mu", "b")
inits1 = function() {
inits = list("b"=rnorm(8,0.0,100.0), "rate"=rgamma(1,1.0,1.0))
}
mod1 = jags.model(textConnection(mod1_string), data=data_jags, inits=inits1, n.chains=3)
# note: dgamma in JAGS = dgamma(shape, rate)
mod1_string = " model {
for (i in 1:length(y)) {
y[i] ~ dgamma(rate/inv_mu[i], rate)
inv_mu[i] = -(b[1] + b[2]*CHOL[i] + b[3]*SGLU[i] + b[4]*HDL[i] + b[5]*AGE[i] + b[6]*SBP[i] + b[7]*DSP[i] + b[8]*BMI[i])
}
for (j in 1:8) {
b[j] ~ dnorm(0.0, 1.0/1.0e4)
}
rate ~ dgamma(0.001, 0.001)
} "
data_jags = list(y=data$GHB, CHOL=data[,"CHOL"], SGLU=data[,"SGLU"], HDL=data[,"HDL"], AGE=data[,"AGE"], SBP=data[,"SBP"], DSP=data[,"DSP"], BMI=data[,"BMI"])
params = c("rate", "inv_mu", "b")
inits1 = function() {
inits = list("b"=rnorm(8,0.0,100.0), "rate"=rgamma(1,1.0,1.0))
}
mod1 = jags.model(textConnection(mod1_string), data=data_jags, inits=inits1, n.chains=3)
# mod1_string = " model {
#     for (i in 1:length(y)) {
#       y[i] ~ dgamma(rate/inv_mu[i], rate)
#       inv_mu[i] = -(b[1] + b[2]*CHOL[i] + b[3]*SGLU[i] + b[4]*HDL[i] + b[5]*AGE[i] + b[6]*SBP[i] + b[7]*DSP[i] + b[8]*BMI[i])
#     }
#     for (j in 1:8) {
#       b[j] ~ dnorm(0.0, 1.0/1.0e4)
#     }
#     rate ~ dgamma(0.001, 0.001)
# } "
mod1_string = " model {
for (i in 1:length(y)) {
y[i] ~ dgamma(shape, shape * inv_mu[i])
inv_mu[i] = -(b[1] + b[2]*CHOL[i] + b[3]*SGLU[i] + b[4]*HDL[i] + b[5]*AGE[i] + b[6]*SBP[i] + b[7]*DSP[i] + b[8]*BMI[i])
}
for (j in 1:8) {
b[j] ~ dnorm(0.0, 1.0/1.0e4)
}
shape ~ dunif(0.001, 100)
} "
data_jags = list(y=data$GHB, CHOL=data[,"CHOL"], SGLU=data[,"SGLU"], HDL=data[,"HDL"], AGE=data[,"AGE"], SBP=data[,"SBP"], DSP=data[,"DSP"], BMI=data[,"BMI"])
params = c("rate", "inv_mu", "b")
inits1 = function() {
inits = list("b"=rnorm(8,0.0,100.0), "rate"=rgamma(1,1.0,1.0))
}
mod1 = jags.model(textConnection(mod1_string), data=data_jags, inits=inits1, n.chains=3)
params = c("shape", "inv_mu", "b")
data_jags = list(y=data$GHB, CHOL=data[,"CHOL"], SGLU=data[,"SGLU"], HDL=data[,"HDL"], AGE=data[,"AGE"], SBP=data[,"SBP"], DSP=data[,"DSP"], BMI=data[,"BMI"])
#     for (i in 1:length(y)) {
#       y[i] ~ dgamma(rate/inv_mu[i], rate)
#       inv_mu[i] = -(b[1] + b[2]*CHOL[i] + b[3]*SGLU[i] + b[4]*HDL[i] + b[5]*AGE[i] + b[6]*SBP[i] + b[7]*DSP[i] + b[8]*BMI[i])
#     }
#     for (j in 1:8) {
#       b[j] ~ dnorm(0.0, 1.0/1.0e4)
#     }
#     rate ~ dgamma(0.001, 0.001)
# } "
# params = c("rate", "inv_mu", "b")
mod1_string = " model {
for (i in 1:length(y)) {
y[i] ~ dgamma(shape, shape * inv_mu[i])
inv_mu[i] = -(b[1] + b[2]*CHOL[i] + b[3]*SGLU[i] + b[4]*HDL[i] + b[5]*AGE[i] + b[6]*SBP[i] + b[7]*DSP[i] + b[8]*BMI[i])
}
for (j in 1:8) {
b[j] ~ dnorm(0.0, 1.0/1.0e4)
}
shape ~ dunif(0.001, 100)
} "
params = c("shape", "inv_mu", "b")
data_jags = list(y=data$GHB, CHOL=data[,"CHOL"], SGLU=data[,"SGLU"], HDL=data[,"HDL"], AGE=data[,"AGE"], SBP=data[,"SBP"], DSP=data[,"DSP"], BMI=data[,"BMI"])
inits1 = function() {
inits = list("b"=rnorm(8,0.0,100.0), "rate"=rgamma(1,1.0,1.0))
}
mod1 = jags.model(textConnection(mod1_string), data=data_jags, inits=inits1, n.chains=3)
# glm with prior
library("rjags")
set.seed(5)
#     for (i in 1:length(y)) {
#       y[i] ~ dgamma(rate/inv_mu[i], rate)
#       inv_mu[i] = -(b[1] + b[2]*CHOL[i] + b[3]*SGLU[i] + b[4]*HDL[i] + b[5]*AGE[i] + b[6]*SBP[i] + b[7]*DSP[i] + b[8]*BMI[i])
#     }
#     for (j in 1:8) {
#       b[j] ~ dnorm(0.0, 1.0/1.0e4)
#     }
#     rate ~ dgamma(0.001, 0.001)
# } "
# params = c("rate", "inv_mu", "b")
mod1_string = " model {
for (i in 1:length(y)) {
y[i] ~ dgamma(shape, shape * inv_mu[i])
inv_mu[i] = -(b[1] + b[2]*CHOL[i] + b[3]*SGLU[i] + b[4]*HDL[i] + b[5]*AGE[i] + b[6]*SBP[i] + b[7]*DSP[i] + b[8]*BMI[i])
}
for (j in 1:8) {
b[j] ~ dnorm(0.0, 1.0/1.0e4)
}
shape ~ dunif(0.001, 100)
} "
params = c("shape", "inv_mu", "b")
data_jags = list(y=data$GHB, CHOL=data[,"CHOL"], SGLU=data[,"SGLU"], HDL=data[,"HDL"], AGE=data[,"AGE"], SBP=data[,"SBP"], DSP=data[,"DSP"], BMI=data[,"BMI"])
#     }
#     for (j in 1:8) {
#       b[j] ~ dnorm(0.0, 1.0/1.0e4)
#     }
#     rate ~ dgamma(0.001, 0.001)
# } "
# params = c("rate", "inv_mu", "b")
# inits1 = function() {
#   inits = list("b"=rnorm(8,0.0,100.0), "rate"=rgamma(1,1.0,1.0))
# }
mod1_string = " model {
for (i in 1:length(y)) {
y[i] ~ dgamma(shape, shape * inv_mu[i])
inv_mu[i] = -(b[1] + b[2]*CHOL[i] + b[3]*SGLU[i] + b[4]*HDL[i] + b[5]*AGE[i] + b[6]*SBP[i] + b[7]*DSP[i] + b[8]*BMI[i])
}
for (j in 1:8) {
b[j] ~ dnorm(0.0, 1.0/1.0e4)
}
shape ~ dunif(0.001, 100)
} "
params = c("shape", "inv_mu", "b")
data_jags = list(y=data$GHB, CHOL=data[,"CHOL"], SGLU=data[,"SGLU"], HDL=data[,"HDL"], AGE=data[,"AGE"], SBP=data[,"SBP"], DSP=data[,"DSP"], BMI=data[,"BMI"])
inits1 = function() {
inits = list("b"=rnorm(8,0.0,100.0), "shape"=runif(1,0.1,100))
}
mod1 = jags.model(textConnection(mod1_string), data=data_jags, inits=inits1, n.chains=3)
#     }
#     for (j in 1:8) {
#       b[j] ~ dnorm(0.0, 1.0/1.0e4)
#     }
#     rate ~ dgamma(0.001, 0.001)
# } "
# params = c("rate", "inv_mu", "b")
# inits1 = function() {
#   inits = list("b"=rnorm(8,0.0,100.0), "rate"=rgamma(1,1.0,1.0))
# }
mod1_string = " model {
for (i in 1:length(y)) {
y[i] ~ dgamma(shape, shape * inv_mu[i])
inv_mu[i] = -(b[1] + b[2]*CHOL[i] + b[3]*SGLU[i] + b[4]*HDL[i] + b[5]*AGE[i] + b[6]*SBP[i] + b[7]*DSP[i] + b[8]*BMI[i])
}
for (j in 1:8) {
b[j] ~ dnorm(0.0, 1.0/1.0e4)
}
shape ~ dgamma(0.01, 0.01)
} "
params = c("shape", "inv_mu", "b")
data_jags = list(y=data$GHB, CHOL=data[,"CHOL"], SGLU=data[,"SGLU"], HDL=data[,"HDL"], AGE=data[,"AGE"], SBP=data[,"SBP"], DSP=data[,"DSP"], BMI=data[,"BMI"])
inits1 = function() {
inits = list("b"=rnorm(8,0.0,100.0), "shape"=rgamma(1,0.1,0.1))
}
mod1 = jags.model(textConnection(mod1_string), data=data_jags, inits=inits1, n.chains=3)
